name: Deploy Prod

on:
  push:
    tags:
      - "v[0-9].[0-9]+.[0-9]+"

env:
  IMAGE_ID: ${{ vars.AWS_ECR_URI }}
  LICENSE_PLATE: ${{ vars.LICENSEPLATE }}

  TF_VERSION: 1.2.2
  TG_VERSION: 0.37.1
  TG_SRC_PATH: terraform
  TFC_WORKSPACE: prod

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  manual_approval:
    name: Manual approval request
    runs-on: ubuntu-22.04

    steps:
      - name: set environment
        run: echo "APP_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        
      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Approval for deployment on production environment. Tag: ${{ env.APP_TAG }}"
  
  terraform_plan:
    name: Terraform plan production
    environment: prod
    runs-on: ubuntu-22.04

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: set environment
        run: echo "APP_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ vars.TERRAFORM_DEPLOY_ROLE_ARN }}
          aws-region: ca-central-1

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - uses: peter-murray/terragrunt-github-action@v1.0.0
        with:
          terragrunt_version: ${{ env.TG_VERSION }}

      - name: Terragrunt Plan
        id: tg_plan
        working-directory: ${{ env.TG_SRC_PATH }}/${{ env.TFC_WORKSPACE }}
        env:
          TF_CLI_ARGS: -no-color
          app_image: ${{ env.IMAGE_ID }}:${{ env.APP_TAG }}
          LICENSE_PLATE: ${{ vars.LICENSEPLATE }}
        run: terragrunt run-all plan --terragrunt-non-interactive | tee /tmp/tg_plan
        continue-on-error: true

      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v1

      - name: Create inframap
        id: create-inframap
        run: |
          curl -s -L -o inframap-linux-amd64.tar.gz https://github.com/cycloidio/inframap/releases/download/v0.5.2/inframap-linux-amd64.tar.gz
          tar xzf inframap-linux-amd64.tar.gz
          chmod +x inframap-linux-amd64
          TG_CACHE_BACKEND_TF=$(find ${{ env.TG_SRC_PATH }}/${{ env.TFC_WORKSPACE }} -name backend.tf)
          TG_CACHE_DIR=$(dirname -- "$TG_CACHE_BACKEND_TF")
          ./inframap-linux-amd64 generate --external-nodes=false --clean=false --hcl "$TG_CACHE_DIR" | dot -Tpng > /tmp/inframap.png
      
      - name: Upload inframap
        id: inframap
        run: |
          IMGBBURL=$(curl -s -L -X POST "https://api.imgbb.com/1/upload?key=${{ vars.IMGBB_API_TOKEN }}" --form "image=@/tmp/inframap.png" | jq -r '.data.url')
          echo "::set-output name=imgurl::$IMGBBURL"

      - name: Get Terraform Plan Output
        id: plan
        uses: juliangruber/read-file-action@v1
        with:
          path: /tmp/tg_plan

      - name: 'Get issue number created by manual approval action'
        uses: actionsflow/axios@v1
        id: issue_number
        with:
          url: "https://api.github.com/search/issues?q=${{ env.APP_TAG }}+in:title+repo:${{ github.repository }}"
          method: 'GET'

      - name: Update Pull Request
        uses: actions/github-script@v3
        env:
          SUCCESS: '\u2705'
          FAILURE: '\u274C'
          INFRAMAP_URL: ${{ steps.inframap.outputs.imgurl }}
        with:
          github-token: ${{ vars.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var ev = JSON.stringify(${{ steps.issue_number.outputs['data'] }});
            var item = JSON.parse(ev)
            var issue_number = item['items'][0]['number'];
            const plan =  `${{ steps.tg_plan.outcome }}` == 'success' ? `${{ env.SUCCESS }}` : `${{ env.FAILURE }}`;
            const output = `#### Terraform Plan: ${plan}

            <details>
            <summary>Show</summary>

            \`\`\`terraform
            ${{ steps.plan.outputs.content }}
            \`\`\`

            </details>

            #### Architecture Diagram
            
            ![img](${process.env.INFRAMAP_URL})

            *Pusher:* @${{ github.actor }}, *Action:* [${process.env.GITHUB_WORKFLOW}: #${process.env.GITHUB_RUN_NUMBER}](https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;
              
            github.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  tag:
    name: Tagging the Docker image
    environment: tools
    runs-on: ubuntu-22.04
    needs: manual_approval

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ vars.TERRAFORM_DEPLOY_ROLE_ARN }}
          aws-region: ca-central-1
          
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create Docker Tag
        run: |
          docker pull ${{ env.IMAGE_ID }}:${GITHUB_SHA}
          docker tag ${{ env.IMAGE_ID }}:${GITHUB_SHA} ${{ env.IMAGE_ID }}:${GITHUB_REF#refs/tags/}
          docker push ${{ env.IMAGE_ID }}:${GITHUB_REF#refs/tags/}

  terraform_apply:
    name: terraform apply production
    environment: prod
    runs-on: ubuntu-22.04
    needs: [terraform_plan, tag, manual_approval]

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          
      - name: set environment
        run: echo "APP_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ vars.TERRAFORM_DEPLOY_ROLE_ARN }}
          aws-region: ca-central-1

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - uses: peter-murray/terragrunt-github-action@v1.0.0
        with:
          terragrunt_version: ${{ env.TG_VERSION }}

      - name: Terragrunt Apply
        working-directory: ${{ env.TG_SRC_PATH }}/${{ env.TFC_WORKSPACE }}
        env:
          app_image: ${{ env.IMAGE_ID }}:${{ env.APP_TAG }}
          LICENSE_PLATE: ${{ vars.LICENSEPLATE }}
        run: terragrunt run-all apply --terragrunt-non-interactive
