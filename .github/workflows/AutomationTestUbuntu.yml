# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Run Automated test Ubuntu

env:
      LICENSE_PLATE: ${{ secrets.MY_LICENSE_PLATE }}   
      
on:
    workflow_dispatch:
    
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
      
    - name: Add key
      run: |
           wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -

    - name: Set repo
      run: |
           echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list

    - name: Install Chrome
      run: |
           sudo apt-get update 
           sudo apt-get install google-chrome-stable
           
    - name: Run the test
      continue-on-error: true
      run: |
            echo $BASEURL
            cd functional-tests
            ./gradlew chromeHeadlessTest --tests="FirstTest"
        
    - name: Zip results folder
      run: |
            zip -r testResults.zip ./functional-tests/build/reports
    
    - name: Get the apt-get update
      run: |
            sudo apt-get update
    
    - name: install gpg
      run: |
            sudo apt-get -y install gpg

    - name: generate random pwd and save it as env variable
      run: |
            export ranPWD=$(echo $(gpg --gen-random --armor 1 8 | sed 's/[^[:alnum:]]//g')) 
            echo randomPWD=$(echo $ranPWD) >> $GITHUB_ENV

    - name: create combined pwd  and Encrypt README.md
      run: |
            fullPWD=${{ env.randomPWD }}-${{ secrets.MY_LICENSE_PLATE }} 
            echo envFullPWD=${{ env.randomPWD }}-${{ secrets.MY_LICENSE_PLATE }}  >> $GITHUB_ENV

    - name: Encrypt README.md
      run: | 
            gpg -c --batch --passphrase ${{ env.envFullPWD }} -o encryptFolder.gpg testResults.zip
    
    - name: Send email with encrypted results
      uses: dawidd6/action-send-mail@v3
      with:
          # Required mail server address:
          server_address: ${{secrets.MAIL_SERVER}}
          # Required mail server port:
          server_port: 465
          # Optional (recommended): mail server username:
          username: ${{secrets.MAIL_USERNAME}}
          # Optional (recommended) mail server password:
          password: ${{secrets.MAIL_PASSWORD}}
          # Required mail subject:
          subject: Encrypted test results for build job ${{github.repository}}
          # Required recipients' addresses:
          to:  ${{secrets.MAIL_ADDRESS}}
          # Required sender full name (address can be skipped):
          from: ${{secrets.MAIL_USERNAME}}
          # Optional plain body:

          body: Encrypted test results for build job ${{github.repository}} 
      
                The encryptFolder.gpg attachment contains the test results. To view them you need  to

                Decrypt the file with the following  command


                    **gpg -d --batch --passphrase PASSPHRASE encryptFolder.gpg > testResults.zip**


                Where PASSPHRASE is password you will receive  in a second email, hyphen, and  your License Plate

                As example, if the password in the following email is **HauCyjM8fxc** and your license plate is **ab1cde** the passphrase to decrypt the file will be


                    **HauCyjM8fxc-ab1cde**

          # Optional attachments:
          attachments: encryptFolder.gpg    




    - name: Send email with password
      uses: dawidd6/action-send-mail@v3
      with:
          # Required mail server address:
          server_address: ${{secrets.MAIL_SERVER}}
          # Required mail server port:
          server_port: 465
          # Optional (recommended): mail server username:
          username: ${{secrets.MAIL_USERNAME}}
          # Optional (recommended) mail server password:
          password: ${{secrets.MAIL_PASSWORD}}
          # Required mail subject:
          subject: Password
          # Required recipients' addresses:
          to:  ${{secrets.MAIL_ADDRESS}}
          # Required sender full name (address can be skipped):
          from: ${{secrets.MAIL_USERNAME}}
          # Optional plain body:

          body: Password to decrypt build job ${{github.repository}} test results 
      
                    **${{ env.randomPWD }}**
