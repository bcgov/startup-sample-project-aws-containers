name: Pull Request Manual


on:
  workflow_dispatch:

env:
  IMAGE_ID: ${{ secrets.AWS_ECR_URI }}

  TF_VERSION: 1.2.2
  TG_VERSION: 0.37.1
  TG_SRC_PATH: terraform
  TFC_WORKSPACE: dev

jobs:
  docker_build:
    name: docker build
    runs-on: ubuntu-22.04

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Test
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          context: .
          file: ./Dockerfile
          target: test

      - name: Build
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          context: .
          file: ./Dockerfile
          target: runtime
          push: false

  terrafrom_plan:
    name: terraform plan
    runs-on: ubuntu-22.04

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TFC_TEAM_TOKEN }}

      - uses: peter-murray/terragrunt-github-action@v1.0.0
        with:
          terragrunt_version: ${{ env.TG_VERSION }}

      - name: Terragrunt Plan
        id: tg_plan
        working-directory: ${{ env.TG_SRC_PATH }}/${{ env.TFC_WORKSPACE }}
        env:
          TF_CLI_ARGS: -no-color
          app_image: ${{ env.IMAGE_ID }}:${{ github.event.workflow_run.head_sha }}
          LICENSE_PLATE: ${{ secrets.MY_LICENSE_PLATE }}
        run: terragrunt run-all plan --terragrunt-non-interactive | tee /tmp/tg_plan
        continue-on-error: true

      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v1

      - name: Create inframap
        id: create-inframap
        run: |
          curl -s -L -o inframap-linux-amd64.tar.gz https://github.com/cycloidio/inframap/releases/download/v0.5.2/inframap-linux-amd64.tar.gz
          tar xzf inframap-linux-amd64.tar.gz
          chmod +x inframap-linux-amd64
          TG_CACHE_BACKEND_TF=$(find ${{ env.TG_SRC_PATH }}/${{ env.TFC_WORKSPACE }} -name backend.tf)
          TG_CACHE_DIR=$(dirname -- "$TG_CACHE_BACKEND_TF")
          ./inframap-linux-amd64 generate --external-nodes=false --clean=false --hcl "$TG_CACHE_DIR" | dot -Tpng > /tmp/inframap.png
      
      - name: Upload inframap
        id: inframap
        run: |
          IMGBBURL=$(curl -s -L -X POST "https://api.imgbb.com/1/upload?key=${{ secrets.IMGBB_API_TOKEN }}" --form "image=@/tmp/inframap.png" | jq -r '.data.url')
          echo "::set-output name=imgurl::$IMGBBURL"
      - name: Get Terraform Plan Output
        id: plan
        uses: juliangruber/read-file-action@v1
        with:
          path: /tmp/tg_plan

      - name: Update Pull Request
        uses: actions/github-script@v3
        env:
          SUCCESS: '\u2705'
          FAILURE: '\u274C'
          INFRAMAP_URL: ${{ steps.inframap.outputs.imgurl }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var ev = JSON.parse(
              fs.readFileSync(process.env.GITHUB_EVENT_PATH, 'utf8')
            );
            var issue_number = ev.pull_request.number;
            const plan =  `${{ steps.tg_plan.outcome }}` == 'success' ? `${{ env.SUCCESS }}` : `${{ env.FAILURE }}`;
            const output = `#### Terraform Plan: ${plan}
            <details>
            <summary>Show</summary>
            \`\`\`terraform
            ${{ steps.plan.outputs.content }}
            \`\`\`
            </details>
            #### Architecture Diagram
            
            ![img](${process.env.INFRAMAP_URL})
            *Pusher:* @${{ github.actor }}, *Action:* [${process.env.GITHUB_WORKFLOW}: #${process.env.GITHUB_RUN_NUMBER}](https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;
              
            github.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terragrunt Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1